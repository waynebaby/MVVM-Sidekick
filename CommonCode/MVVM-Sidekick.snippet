<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <!--View Model Property-->
  <CodeSnippet Format="1.0.0">
    <Header>                                
      <Title>MVVM-Sidekick Property</Title>
      <Shortcut>propvm4</Shortcut>
      <Description>Property of View Model for MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>       
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>

      </Declarations>
      <Code Language="CSharp" >
        <![CDATA[        public $type$ $property$
        {
            get { return _$property$Locator(this).Value; }
            set { _$property$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>(_$property$Locator);
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator("$property$", (m,pn)=>m.Initialize(pn,ref m._$property$, ref _$property$Locator, default)); 
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Property for C# 6+</Title>
      <Shortcut>propvm</Shortcut>
      <Description>Property of View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp">
        <![CDATA[        public $type$ $property$ { get => _$property$Locator(this).Value; set => _$property$Locator(this).SetValueAndTryNotify(value); }
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>( _$property$Locator);
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator(nameof($property$), m =>m.Initialize(nameof($property$),ref m._$property$, ref _$property$Locator, default));         
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Property with complex value factory for </Title>
      <Shortcut>propcvm4</Shortcut>
      <Description>Property of View Model for XAML MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp">
        <![CDATA[        public $type$ $property$
        {
            get { return _$property$Locator(this).Value; }
            set { _$property$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>(_$property$Locator);
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator("$property$", (m,pn)=>m.Initialize(pn,ref m._$property$, ref _$property$Locator,  
            model=>
            { 
                var vm = CastToCurrentType(model);
                //TODO: Add the logic that produce default value from vm current status.
                return default($type$); 
            }));         
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Property with complex value factory for C# 6+</Title>
      <Shortcut>propcvm</Shortcut>
      <Description>Property of View Model for XAML MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
        </Literal>
        <Literal>
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
        </Literal>

      </Declarations>
      <Code Language="csharp">
        <![CDATA[        public $type$ $property$ { get => _$property$Locator(this).Value; set => _$property$Locator(this).SetValueAndTryNotify(value);}
        #region Property $type$ $property$ Setup        
        protected Property<$type$> _$property$ = new Property<$type$>(_$property$Locator);
        static Func<BindableBase,ValueContainer<$type$>> _$property$Locator= RegisterContainerLocator(nameof($property$), m =>m.Initialize(nameof($property$),ref m._$property$, ref _$property$Locator,
            model=>
            { 
                var vm = CastToCurrentType(model);
                //TODO: Add the logic that produce default value from vm current status.
                return default($type$); 
            }));         
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <!--View Model Class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Class</Title>
      <Shortcut>classvm</Shortcut>
      <Description>View Model for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>View Model Class Name</ToolTip>
          <Default>SomeViewModel</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[    public class $class$ : ViewModel<$class$> 
    {
        public $class$()
        {
           
            if (IsInDesignMode)
            { 
                //Add design time mock data init here. These will not execute in runtime.
            }                                        
        }

        //Use propvm + tab +tab  to create a new property of vm here:
        //Use propcvm + tab +tab  to create a new property of vm  with complex default value factory here:
        //Use propcmd + tab +tab  to create a new command of vm here:
    }
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--Bindable Class-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Bindable Class</Title>
      <Shortcut>classvm</Shortcut>
      <Description>Bindable type for WPF &amp; Silverlight MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>Bindable Class Name</ToolTip>
          <Default>SomeBindable</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[    public class $class$ : Bindable<$class$> 
    {
        public $class$()
        {
            // Use propery to init value here:
            if (IsInDesignMode)
            { 
                //Add design time test data init here. These will not execute in runtime.
            }
        }

        //Use propvm + tab +tab  to create a new property of bindable here
    }     
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <!--View Model Command With State-->
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Async Command With Generic State</Title>
      <Shortcut>propcmd4</Shortcut>
      <Description>Command Model of MVVM </Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
         <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>Command Type</ToolTip>
          <Default>ReactiveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
        <Literal>
          <ID>stateType</ID>
          <ToolTip>State Type</ToolTip>
          <Default>String</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[        public CommandModel<$commandType$, $stateType$> Command$commandName$
        {
            get { return _Command$commandName$Locator(this).Value; }
            set { _Command$commandName$Locator(this).SetValueAndTryNotify(value); }
        }
        #region Property CommandModel<$commandType$, $stateType$> Command$commandName$ Setup               
        protected Property<CommandModel<$commandType$, $stateType$>> _Command$commandName$ = new Property<CommandModel<$commandType$, $stateType$>>(_Command$commandName$Locator);
        static Func<BindableBase,ValueContainer<CommandModel<$commandType$, $stateType$>>> _Command$commandName$Locator= RegisterContainerLocator("Command$commandName$", m =>m.Initialize("Command$commandName$",ref m._Command$commandName$, ref _Command$commandName$Locator,
            model => 
            {
                var state = "Command$commandName$";       
                var commandId = "Command$commandName$";
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true, commandId: commandId) { ViewModel = model };
                
                cmd.DoExecuteUIBusyActionTask(
                        vm,
                        async (e,cancelToken) =>
                        {
                            //Todo: Add $commandName$ logic here, or
                            await Task.CompletedTask;
                        })
                    .Subscribe()
                    .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(state);
                
                cmdmdl.ListenToIsUIBusy(
                    model: vm, 
                    canExecuteWhenBusy: false);
                return cmdmdl;
            }));         
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>

<CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Lightly Confiugured Command With UI Busy Awareness for C# 6+</Title>
      <Shortcut>propcmdb</Shortcut>
      <Description>Async Command for MVVM-Sidekick</Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
  
        <Literal>
          <ID>commandName</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
       
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[        public CommandModel Command$commandName$ => _Command$commandName$Locator(this).Value;         
        #region Property CommandModel Command$commandName$ Setup                
        protected Property<CommandModel> _Command$commandName$ = new Property<CommandModel>(_Command$commandName$Locator);
        static Func<BindableBase,ValueContainer<CommandModel>> _Command$commandName$Locator= RegisterContainerLocator(nameof(Command$commandName$), m =>m.Initialize(nameof(Command$commandName$),ref m._Command$commandName$, ref _Command$commandName$Locator,
            model => 
            {
                object state = nameof(Command$commandName$);      
                var commandId = nameof(Command$commandName$);
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true, commandId: commandId) { ViewModel = model };
                
                cmd.DoExecuteUIBusyActionTask(
                        vm,
                        async (e,cancelToken)  =>
                        {
                              //Todo: Add $commandName$ logic here, or
                              await Task.CompletedTask;
                        })
                    .Subscribe()
                    .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(state);
                
                cmdmdl.ListenToIsUIBusy(
                    model: vm, 
                    canExecuteWhenBusy: false);
                return cmdmdl;
            }));       
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>



    <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Lightly Confiugured Command for C# 6+</Title>
      <Shortcut>propcmd</Shortcut>
      <Description>Sync Command Model for MVVM-Sidekick</Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
       
        <Literal>
          <ID>commandName</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
     
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[        public CommandModel Command$commandName$ => _Command$commandName$Locator(this).Value;        
        #region Property CommandModel Command$commandName$ Setup                
        protected Property<CommandModel> _Command$commandName$ = new Property<CommandModel>(_Command$commandName$Locator);
        static Func<BindableBase,ValueContainer<CommandModel>> _Command$commandName$Locator= RegisterContainerLocator(nameof(Command$commandName$), m =>m.Initialize(nameof(Command$commandName$),ref m._Command$commandName$, ref _Command$commandName$Locator,
            model => 
            {
                object state = nameof(Command$commandName$);      
                var commandId = nameof(Command$commandName$);
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true, commandId: commandId) { ViewModel = model };
                
                cmd.DoExecuteUIBusyActionTask( 
                        vm,          
                        async (e,cancelToken)  =>
                        {
                            //Todo: Add $commandName$ logic here  
                            await Task.CompletedTask;                            
                        })
                    .Subscribe()
                    .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(state);                 
             
                return cmdmdl;
            }));    
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>


  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Fullly Confiugured Command With Generic State and With UI Busy Awareness for C# 6+</Title>
      <Shortcut>propcmdbfull</Shortcut>
      <Description>Async Command for MVVM-Sidekick</Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>Command Type</ToolTip>
          <Default>ReactiveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
        <Literal>
          <ID>stateType</ID>
          <ToolTip>State Type</ToolTip>
          <Default>String</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[
        public CommandModel<$commandType$, $stateType$> Command$commandName$ => _Command$commandName$Locator(this).Value;        
        #region Property CommandModel<$commandType$, $stateType$> Command$commandName$ Setup              
        protected Property<CommandModel<$commandType$, $stateType$>> _Command$commandName$ = new Property<CommandModel<$commandType$, $stateType$>>(_Command$commandName$Locator);
        static Func<BindableBase,ValueContainer<CommandModel<$commandType$, $stateType$>>> _Command$commandName$Locator= RegisterContainerLocator(nameof(Command$commandName$), m =>m.Initialize(nameof(Command$commandName$),ref m._Command$commandName$, ref _Command$commandName$Locator,
            model => 
            {
                var state = default($stateType$);       
                var commandId = nameof(Command$commandName$);
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true, commandId: commandId) { ViewModel = model };
                
                cmd.DoExecuteUIBusyActionTask(
                        vm,
                        async (e,cancelToken)  =>
                        {
                            //Todo: Add $commandName$ logic here, or
                            await Task.CompletedTask;
                        })
                    .Subscribe()
                    .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(state);
                
                cmdmdl.ListenToIsUIBusy(
                    model: vm, 
                    canExecuteWhenBusy: false);
                return cmdmdl;
            }));       
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>



  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>MVVM-Sidekick Fullly Confiugured Command With Generic State for C# 6+</Title>
      <Shortcut>propcmdFull</Shortcut>
      <Description>Sync Command Model for MVVM-Sidekick</Description>
      <Author>Wayne Wang</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>commandType</ID>
          <ToolTip>Command Type</ToolTip>
          <Default>ReactiveCommand</Default>
        </Literal>
        <Literal>
          <ID>commandName</ID>
          <ToolTip>Command Name</ToolTip>
          <Default>SomeCommand</Default>
        </Literal>
        <Literal>
          <ID>stateType</ID>
          <ToolTip>State Type</ToolTip>
          <Default>String</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp" >
        <![CDATA[
        public CommandModel<$commandType$, $stateType$> Command$commandName$ => _Command$commandName$Locator(this).Value;        
        #region Property CommandModel<$commandType$, $stateType$> Command$commandName$ Setup 
        protected Property<CommandModel<$commandType$, $stateType$>> _Command$commandName$ = new Property<CommandModel<$commandType$, $stateType$>>(_Command$commandName$Locator);
        static Func<BindableBase,ValueContainer<CommandModel<$commandType$, $stateType$>>> _Command$commandName$Locator= RegisterContainerLocator(nameof(Command$commandName$), m =>m.Initialize(nameof(Command$commandName$),ref m._Command$commandName$, ref _Command$commandName$Locator,
            model => 
            {
                var state = default($stateType$);       
                var commandId = nameof(Command$commandName$);
                var vm = CastToCurrentType(model);
                var cmd = new ReactiveCommand(canExecute: true, commandId: commandId) { ViewModel = model };
                
                cmd.DoExecuteUIBusyActionTask(
                      vm,
                      async (e,cancelToken)  =>
                      {
                          //Todo: Add $commandName$ logic here, or
                          await Task.CompletedTask;
                      })
                  .Subscribe()
                  .DisposeWith(vm);
                    
                var cmdmdl = cmd.CreateCommandModel(state);                 
             
                return cmdmdl;
            }));    
        #endregion
]]>
      </Code>
    </Snippet>
  </CodeSnippet>



</CodeSnippets>
